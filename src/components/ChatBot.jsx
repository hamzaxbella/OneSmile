import React, { useState, useRef, useEffect, useContext } from 'react';
import { Context } from '../App';

const ChatBot = () => {
  const [selectedLanguage] = useContext(Context);
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [conversationHistory, setConversationHistory] = useState([]);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [hasBeenClicked, setHasBeenClicked] = useState(false);
  const messagesEndRef = useRef(null);
  const audioRef = useRef(null);
  const font = selectedLanguage === "FR" ? "font-Inter" : "font-Cairo";

  // Sound effects with smooth audio
  const playSound = (type) => {
    if (!soundEnabled) return; // Don't play if sound is disabled
    
    try {
      // Create audio context with better compatibility
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      
      // Resume audio context if suspended (required for some browsers)
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      
      switch(type) {
        case 'send':
          createSmoothTone(audioContext, 440, 0.15, 'sine'); // A note, soft sine wave
          break;
        case 'receive':
          createNotificationSound(audioContext); // Pleasant notification sound
          break;
        case 'typing':
          createSubtleTick(audioContext); // Very subtle tick
          break;
      }
    } catch (error) {
      console.log('Audio not available:', error);
    }
  };

  // Create smooth tone with fade in/out
  const createSmoothTone = (audioContext, frequency, duration, waveType = 'sine') => {
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = frequency;
    oscillator.type = waveType;
    
    // Smooth fade in and out
    const now = audioContext.currentTime;
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(0.03, now + 0.02); // Gentle fade in
    gainNode.gain.linearRampToValueAtTime(0.03, now + duration - 0.05); // Hold
    gainNode.gain.linearRampToValueAtTime(0, now + duration); // Smooth fade out
    
    oscillator.start(now);
    oscillator.stop(now + duration);
  };

  // Create pleasant notification sound (two-tone)
  const createNotificationSound = (audioContext) => {
    const now = audioContext.currentTime;
    
    // First tone (higher)
    createSmoothTone(audioContext, 523.25, 0.12, 'sine'); // C5
    
    // Second tone (lower) - slightly delayed
    setTimeout(() => {
      if (audioContext.state !== 'closed') {
        createSmoothTone(audioContext, 392, 0.15, 'sine'); // G4
      }
    }, 80);
  };

  // Create very subtle tick sound
  const createSubtleTick = (audioContext) => {
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    const filter = audioContext.createBiquadFilter();
    
    oscillator.connect(filter);
    filter.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = 1000;
    oscillator.type = 'triangle';
    
    // Low-pass filter for softer sound
    filter.type = 'lowpass';
    filter.frequency.value = 2000;
    
    const now = audioContext.currentTime;
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(0.01, now + 0.005); // Very quiet
    gainNode.gain.linearRampToValueAtTime(0, now + 0.03); // Very short
    
    oscillator.start(now);
    oscillator.stop(now + 0.03);
  };

  // Markdown rendering function
  const renderMarkdown = (text) => {
    if (!text) return '';
    
    let html = text;
    
    // Bold text (**text** or __text__)
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');
    
    // Italic text (*text* or _text_)
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    html = html.replace(/_(.*?)_/g, '<em>$1</em>');
    
    // Code blocks (```code```)
    html = html.replace(/```(.*?)```/gs, '<code class="block bg-gray-800 text-green-400 p-2 rounded text-xs">$1</code>');
    
    // Inline code (`code`)
    html = html.replace(/`(.*?)`/g, '<code class="bg-gray-200 px-1 rounded text-xs">$1</code>');
    
    // Line breaks
    html = html.replace(/\n/g, '<br>');
    
    // Lists (- item or * item)
    html = html.replace(/^[\s]*[-\*]\s+(.*$)/gim, '<li class="ml-4">‚Ä¢ $1</li>');
    
    // Links [text](url)
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-500 underline" target="_blank">$1</a>');
    
    // Phone numbers
    html = html.replace(/(\+\d{1,3}[\s\-]?\d{9,})/g, '<a href="tel:$1" class="text-primary font-semibold">$1</a>');
    
    // Email addresses
    html = html.replace(/([\w\.-]+@[\w\.-]+\.\w+)/g, '<a href="mailto:$1" class="text-primary font-semibold">$1</a>');
    
    return html;
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Load preferences from localStorage
    try {
      const savedSoundPreference = localStorage.getItem('onesmile_sound_enabled');
      if (savedSoundPreference !== null) {
        setSoundEnabled(JSON.parse(savedSoundPreference));
      }
      
      const savedClickedState = localStorage.getItem('onesmile_widget_clicked');
      if (savedClickedState !== null) {
        setHasBeenClicked(JSON.parse(savedClickedState));
      }
    } catch (error) {
      console.log('Could not load preferences:', error);
    }
  }, []);

  useEffect(() => {
    // Save sound preference to localStorage
    try {
      localStorage.setItem('onesmile_sound_enabled', JSON.stringify(soundEnabled));
    } catch (error) {
      console.log('Could not save sound preference:', error);
    }
  }, [soundEnabled]);

  useEffect(() => {
    // Save widget clicked state to localStorage
    try {
      localStorage.setItem('onesmile_widget_clicked', JSON.stringify(hasBeenClicked));
    } catch (error) {
      console.log('Could not save widget clicked state:', error);
    }
  }, [hasBeenClicked]);

  useEffect(() => {
    // Initialize with welcome message when chat opens
    if (isOpen && messages.length === 0) {
      // Load conversation history first
      loadConversationHistory();
      
      const welcomeMessage = selectedLanguage === 'FR' 
        ? "üëã **Bonjour !** Je suis l'assistant virtuel de *OneSmile*. Comment puis-je vous aider avec vos questions sur le blanchiment dentaire ?"
        : "üëã **ŸÖÿ±ÿ≠ÿ®ÿßŸã!** ÿ£ŸÜÿß ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä ŸÑŸÄ *OneSmile*. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿ®ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ ÿ≠ŸàŸÑ ÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜÿü";
      
      setTimeout(() => {
        setMessages([{
          id: 1,
          text: welcomeMessage,
          sender: 'bot',
          timestamp: new Date()
        }]);
        playSound('receive');
      }, 500);
    }
  }, [isOpen, selectedLanguage]);

  // Conversation memory management
  const addToConversationHistory = (userMessage, botResponse) => {
    const newEntry = {
      user: userMessage,
      assistant: botResponse,
      timestamp: new Date().toISOString()
    };
    
    setConversationHistory(prev => {
      // Keep last 10 exchanges to maintain context while avoiding token limits
      const updatedHistory = [...prev, newEntry];
      const finalHistory = updatedHistory.slice(-10);
      
      // Persist to localStorage
      try {
        localStorage.setItem('onesmile_chat_history', JSON.stringify(finalHistory));
      } catch (error) {
        console.log('Could not save chat history to localStorage:', error);
      }
      
      return finalHistory;
    });
  };

  const loadConversationHistory = () => {
    try {
      const saved = localStorage.getItem('onesmile_chat_history');
      if (saved) {
        const parsedHistory = JSON.parse(saved);
        // Only load recent history (last 24 hours)
        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        const recentHistory = parsedHistory.filter(entry => 
          new Date(entry.timestamp) > oneDayAgo
        );
        setConversationHistory(recentHistory);
      }
    } catch (error) {
      console.log('Could not load chat history from localStorage:', error);
    }
  };

  const clearConversationHistory = () => {
    setConversationHistory([]);
    try {
      localStorage.removeItem('onesmile_chat_history');
    } catch (error) {
      console.log('Could not clear chat history from localStorage:', error);
    }
  };

  const getConversationContext = () => {
    if (conversationHistory.length === 0) return '';
    
    const contextPrompt = selectedLanguage === 'FR' 
      ? '\n\nCONTEXTE DE LA CONVERSATION PR√âC√âDENTE:'
      : '\n\nÿ≥ŸäÿßŸÇ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©:';
    
    const conversationText = conversationHistory.map(entry => 
      `User: ${entry.user}\nAssistant: ${entry.assistant}`
    ).join('\n\n');
    
    return `${contextPrompt}\n${conversationText}\n\n`;
  };

  const sendToGemini = async (message) => {
    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      if (!apiKey) {
        throw new Error('Gemini API key not found');
      }

      const systemPrompt = selectedLanguage === 'FR' ? `
        IDENTIT√â ET R√îLE:
        Tu es l'assistant virtuel professionnel de OneSmile, l'institut de blanchiment dentaire de r√©f√©rence situ√© √† Agadir, Maroc. Tu repr√©sentes une √©quipe exp√©riment√©e et professionnelle sp√©cialis√©e dans les traitements cosm√©tiques dentaires.

        √Ä PROPOS DE ONESMILE:
        OneSmile est le cabinet de blanchiment dentaire de r√©f√©rence √† Agadir, offrant une vaste gamme de services pour r√©pondre √† tous les besoins en mati√®re de blanchiment dentaire. Fort d'une exp√©rience de plusieurs ann√©es, l'√©tablissement s'est distingu√© par son professionnalisme et son d√©vouement √† fournir des r√©sultats exceptionnels. OneSmile a eu le privil√®ge de servir de nombreux clients, leur procurant des sourires radieux et une confiance retrouv√©e.

        SERVICES OFFERTS:
        1. Blanchiment-√©claircicement dentaire - Traitement professionnel avec technologie avanc√©e (30min √† 2h)
        2. D√©tartrage et polissage - Techniques douces et efficaces pour √©liminer le tartre
        3. Snap-On Smile - Solution non-invasive, superposition personnalis√©e amovible
        4. Proth√®se dentaire - Proth√®ses sur mesure, ajustement parfait pour confort et fonctionnalit√©
        5. Goutti√®re dentaire - Goutti√®res personnalis√©es pour blanchiment √† domicile et protection
        6. Bijoux Dentaires & Grillz - Designs vari√©s, s√ªrs et non-invasifs, facilement amovibles

        TARIFS:
        - Fast White: 500 DH (Une s√©ance, 30min)
        - Glamorous White: 700 DH (Deux s√©ances, 60min)  
        - Extra White: 1200 DH (Trois s√©ances, 120min)
        - Bijoux dentaires & Grillz: √Ä partir de 150 DH
        - Paiement en esp√®ces accept√©
        - S√©ance duo: prix par personne

        INFORMATIONS PRATIQUES:
        - Horaires: Lundi-Samedi 10h00-17h30, Dimanche ferm√©
        - T√©l√©phone: +212658547264
        - Email: osmile.be@gmail.com
        - Adresse: Agadir, Maroc
        - R√©seaux sociaux: Facebook, Instagram, Threads, TikTok (@onesmilemaroc)

        QUESTIONS FR√âQUENTES √Ä CONNA√éTRE:
        - Le blanchiment utilise des agents qui p√©n√®trent l'√©mail pour √©liminer taches et d√©coloration
        - Traitement s√ªr quand effectu√© par des experts, pas de dommage aux dents
        - Dur√©e: 30min √† 1h en une s√©ance selon le traitement choisi
        - R√©sultats visibles et durables avec soins appropri√©s

        R√àGLES DE COMMUNICATION:
        ‚úÖ Rester professionnel, chaleureux et rassurant
        ‚úÖ Toujours encourager la consultation pour conseils personnalis√©s  
        ‚úÖ Mettre l'accent sur la s√©curit√© et l'expertise professionnelle
        ‚úÖ Rester dans le domaine dentaire/cosm√©tique
        ‚úÖ Proposer de prendre rendez-vous pour √©valuation personnalis√©e
        ‚úÖ Utiliser le contexte de la conversation pr√©c√©dente pour personnaliser les r√©ponses
        ‚úÖ Faire r√©f√©rence aux √©changes pr√©c√©dents quand appropri√©
        ‚úÖ √âviter de r√©p√©ter les m√™mes informations d√©j√† donn√©es dans la conversation
        ‚ùå Ne jamais garantir de r√©sultats sp√©cifiques
        ‚ùå Ne pas donner de diagnostic m√©dical
        ‚ùå Ne pas traiter les urgences dentaires (rediriger vers services d'urgence)

        OBJECTIF: Fournir des informations pr√©cises, encourager les consultations et aider les visiteurs √† prendre des d√©cisions √©clair√©es concernant leurs soins dentaires cosm√©tiques en maintenant une conversation coh√©rente et personnalis√©e.
      ` : `
        ÿßŸÑŸáŸàŸäÿ© ŸàÿßŸÑÿØŸàÿ±:
        ÿ£ŸÜÿ™ ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä ÿßŸÑŸÖÿ≠ÿ™ÿ±ŸÅ ŸÑŸÄ OneSmileÿå ŸÖÿπŸáÿØ ÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ ÿßŸÑÿ±ÿßÿ¶ÿØ ŸÅŸä ÿ£ŸÉÿßÿØŸäÿ±ÿå ÿßŸÑŸÖÿ∫ÿ±ÿ®. ÿ™ŸÖÿ´ŸÑ ŸÅÿ±ŸäŸÇÿßŸã ÿ∞ÿß ÿÆÿ®ÿ±ÿ© ŸàŸÖŸáŸÜŸäÿ© ŸÖÿ™ÿÆÿµÿµÿßŸã ŸÅŸä ÿπŸÑÿßÿ¨ÿßÿ™ ÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ.

        ÿ≠ŸàŸÑ OneSmile:
        ŸäŸÇÿπ ŸÖŸÇÿ± ÿπŸäÿßÿØÿ© One Smile ŸÅŸä ŸÖÿØŸäŸÜÿ© ÿ£ŸÉÿßÿØŸäÿ± ÿ®ÿßŸÑŸÖÿ∫ÿ±ÿ®ÿå ŸàŸáŸä ÿßŸÑÿπŸäÿßÿØÿ© ÿßŸÑÿ±ÿßÿ¶ÿØÿ© ŸÅŸä ŸÖÿ¨ÿßŸÑ ÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜÿå ÿ≠Ÿäÿ´ ÿ™ŸÇÿØŸÖ ŸÖÿ¨ŸÖŸàÿπÿ© Ÿàÿßÿ≥ÿπÿ© ŸÖŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ŸÑÿ™ŸÑÿ®Ÿäÿ© ÿ¨ŸÖŸäÿπ ÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ. ŸÖÿπ ÿ≥ŸÜŸàÿßÿ™ ÿπÿØŸäÿØÿ© ŸÖŸÜ ÿßŸÑÿÆÿ®ÿ±ÿ©ÿå ÿ™ŸÖŸäÿ≤ÿ™ ÿπŸäÿßÿØÿ™ŸÜÿß ÿ®ŸÖŸáŸÜŸäÿ™Ÿáÿß Ÿàÿ™ŸÅÿßŸÜŸäŸáÿß ŸÅŸä ÿ™ŸÇÿØŸäŸÖ ŸÜÿ™ÿßÿ¶ÿ¨ ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ¶Ÿäÿ©. ŸÑŸÇÿØ ŸÉÿßŸÜ ŸÑŸÜÿß ÿ¥ÿ±ŸÅ ÿÆÿØŸÖÿ© ÿßŸÑÿπÿØŸäÿØ ŸÖŸÜ ÿßŸÑÿπŸÖŸÑÿßÿ°ÿå Ÿàÿ™ÿ≤ŸàŸäÿØŸáŸÖ ÿ®ÿßÿ®ÿ™ÿ≥ÿßŸÖÿßÿ™ ŸÖÿ¥ÿ±ŸÇÿ© Ÿàÿ´ŸÇÿ© ÿ¨ÿØŸäÿØÿ©.

        ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÖŸÇÿØŸÖÿ©:
        1. ÿ™ÿ®ŸäŸäÿ∂ Ÿàÿ™ŸÑŸÖŸäÿπ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ - ÿπŸÑÿßÿ¨ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ÿ®ÿ™ŸÇŸÜŸäÿ© ŸÖÿ™ŸÇÿØŸÖÿ© (30 ÿØŸÇŸäŸÇÿ© ÿ•ŸÑŸâ ÿ≥ÿßÿπÿ™ŸäŸÜ)
        2. ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ¨Ÿäÿ± - ÿ™ŸÇŸÜŸäÿßÿ™ ŸÑÿ∑ŸäŸÅÿ© ŸàŸÅÿπÿßŸÑÿ© ŸÑÿ•ÿ≤ÿßŸÑÿ© ÿ™ÿ±ÿßŸÉŸÖ ÿßŸÑÿ¨Ÿäÿ± ÿ®ÿ£ŸÖÿßŸÜ
        3. ÿßÿ®ÿ™ÿ≥ÿßŸÖÿ© ÿ≥ÿ±Ÿäÿπÿ© - ÿ≠ŸÑ ÿ∫Ÿäÿ± ÿ¨ÿ±ÿßÿ≠Ÿäÿå ÿ∑ŸÇŸÖ ŸÖÿÆÿµÿµ ŸÇÿßÿ®ŸÑ ŸÑŸÑÿ•ÿ≤ÿßŸÑÿ©
        4. ÿ£ÿ∑ŸÇŸÖ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ - ÿ£ÿ∑ŸÇŸÖ ŸÖÿÆÿµÿµÿ©ÿå ŸÖŸÑÿßÿ°ŸÖÿ© ŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÑÿ±ÿßÿ≠ÿ© ŸàÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ
        5. ŸàÿßŸÇŸä ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ - ŸàÿßŸÇŸäÿßÿ™ ŸÖÿÆÿµÿµÿ© ŸÑŸÑÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑŸÖŸÜÿ≤ŸÑŸä ŸàÿßŸÑÿ≠ŸÖÿßŸäÿ©
        6. ŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ - ÿ™ÿµÿßŸÖŸäŸÖ ŸÖÿ™ŸÜŸàÿπÿ©ÿå ÿ¢ŸÖŸÜÿ© Ÿàÿ∫Ÿäÿ± ÿ¨ÿ±ÿßÿ≠Ÿäÿ©ÿå ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ•ÿ≤ÿßŸÑÿ© ÿ®ÿ≥ŸáŸàŸÑÿ©

        ÿßŸÑÿ™ÿπÿ±ŸäŸÅÿßÿ™:
        - ÿ™ÿ®ŸäŸäÿ∂ ÿ≥ÿ±Ÿäÿπ: 500 ÿØÿ±ŸáŸÖ (ÿ¨ŸÑÿ≥ÿ© Ÿàÿßÿ≠ÿØÿ©ÿå 30 ÿØŸÇŸäŸÇÿ©)
        - ÿ™ÿ®ŸäŸäÿ∂ ŸÅÿßÿÆÿ±: 700 ÿØÿ±ŸáŸÖ (ÿ¨ŸÑÿ≥ÿ™ÿßŸÜÿå 60 ÿØŸÇŸäŸÇÿ©)
        - ÿ™ÿ®ŸäŸäÿ∂ ÿ•ÿ∂ÿßŸÅŸä: 1200 ÿØÿ±ŸáŸÖ (ÿ´ŸÑÿßÿ´ ÿ¨ŸÑÿ≥ÿßÿ™ÿå 120 ÿØŸÇŸäŸÇÿ©)
        - ŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ: ÿßÿ®ÿ™ÿØÿßÿ°Ÿã ŸÖŸÜ 150 ÿØÿ±ŸáŸÖ
        - ÿßŸÑÿØŸÅÿπ ŸÜŸÇÿØÿßŸã ÿ£Ÿà ÿ®ÿßŸÑÿ®ÿ∑ÿßŸÇÿ© ÿßŸÑÿßÿ¶ÿ™ŸÖÿßŸÜŸäÿ©
        - ÿ¨ŸÑÿ≥ÿ© ŸÖÿ≤ÿØŸàÿ¨ÿ©: ÿßŸÑÿ≥ÿπÿ± ŸÑŸÉŸÑ ÿ¥ÿÆÿµ

        ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÖŸÑŸäÿ©:
        - ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿπŸÖŸÑ: ÿßŸÑÿßÿ´ŸÜŸäŸÜ-ÿßŸÑÿ≥ÿ®ÿ™ 10:00-17:30ÿå ÿßŸÑÿ£ÿ≠ÿØ ŸÖÿ∫ŸÑŸÇ
        - ÿßŸÑŸáÿßÿ™ŸÅ: +212658547264
        - ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä: osmile.be@gmail.com
        - ÿßŸÑÿπŸÜŸàÿßŸÜ: ÿ£ŸÉÿßÿØŸäÿ±ÿå ÿßŸÑŸÖÿ∫ÿ±ÿ®
        - Ÿàÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ™ŸàÿßÿµŸÑ: ŸÅŸäÿ≥ÿ®ŸàŸÉÿå ÿ•ŸÜÿ≥ÿ™ÿ∫ÿ±ÿßŸÖÿå ÿ´ÿ±ŸäÿØÿ≤ÿå ÿ™ŸäŸÉ ÿ™ŸàŸÉ

        ÿ£ÿ≥ÿ¶ŸÑÿ© ÿ¥ÿßÿ¶ÿπÿ© ŸÖŸáŸÖÿ©:
        - ÿßŸÑÿ™ÿ®ŸäŸäÿ∂ Ÿäÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸàÿßÿØ ÿ™ÿÆÿ™ÿ±ŸÇ ÿßŸÑŸÖŸäŸÜÿß ŸÑÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ®ŸÇÿπ ŸàÿßŸÑÿ™ŸÑŸàŸÜ
        - ÿßŸÑÿπŸÑÿßÿ¨ ÿ¢ŸÖŸÜ ÿπŸÜÿØ ÿ•ÿ¨ÿ±ÿßÿ¶Ÿá ÿ®Ÿàÿßÿ≥ÿ∑ÿ© ÿÆÿ®ÿ±ÿßÿ°ÿå ŸÑÿß ÿ∂ÿ±ÿ± ŸÑŸÑÿ£ÿ≥ŸÜÿßŸÜ
        - ÿßŸÑŸÖÿØÿ©: 30 ÿØŸÇŸäŸÇÿ© ÿ•ŸÑŸâ ÿ≥ÿßÿπÿ™ŸäŸÜ ŸÅŸä ÿ¨ŸÑÿ≥ÿ© Ÿàÿßÿ≠ÿØÿ© ÿ≠ÿ≥ÿ® ÿßŸÑÿπŸÑÿßÿ¨
        - ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖÿ±ÿ¶Ÿäÿ© ŸàÿØÿßÿ¶ŸÖÿ© ŸÖÿπ ÿßŸÑÿπŸÜÿßŸäÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ©

        ŸÇŸàÿßÿπÿØ ÿßŸÑÿ™ŸàÿßÿµŸÑ:
        ‚úÖ ÿßÿ®ŸÇ ŸÖŸáŸÜŸäÿßŸãÿå ŸàÿØŸàÿØÿßŸã ŸàŸÖÿ∑ŸÖÿ¶ŸÜÿßŸã
        ‚úÖ ÿ¥ÿ¨ÿπ ÿØÿßÿ¶ŸÖÿßŸã ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ŸÑŸÑŸÜÿµÿßÿ¶ÿ≠ ÿßŸÑÿ¥ÿÆÿµŸäÿ©
        ‚úÖ ÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿßŸÑÿ≥ŸÑÿßŸÖÿ© ŸàÿßŸÑÿÆÿ®ÿ±ÿ© ÿßŸÑŸÖŸáŸÜŸäÿ©
        ‚úÖ ÿßÿ®ŸÇ ŸÅŸä ŸÖÿ¨ÿßŸÑ ÿ∑ÿ® ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ/ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ
        ‚úÖ ÿßŸÇÿ™ÿ±ÿ≠ ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØ ŸÑŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ¥ÿÆÿµŸä
        ‚úÖ ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≥ŸäÿßŸÇ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÑÿ™ÿÆÿµŸäÿµ ÿßŸÑÿ±ÿØŸàÿØ
        ‚úÖ ÿßÿ¥ÿ± ÿ•ŸÑŸâ ÿßŸÑÿ™ÿ®ÿßÿØŸÑÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿπŸÜÿØ ÿßŸÑÿßŸÇÿ™ÿ∂ÿßÿ°
        ‚úÖ ÿ™ÿ¨ŸÜÿ® ÿ™ŸÉÿ±ÿßÿ± ŸÜŸÅÿ≥ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿπÿ∑ÿßÿ© ŸÅŸä ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
        ‚ùå ŸÑÿß ÿ™ÿ∂ŸÖŸÜ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖÿ≠ÿØÿØÿ© ÿ£ÿ®ÿØÿßŸã
        ‚ùå ŸÑÿß ÿ™ŸÇÿØŸÖ ÿ™ÿ¥ÿÆŸäÿµÿßŸã ÿ∑ÿ®ŸäÿßŸã
        ‚ùå ŸÑÿß ÿ™ÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶ (Ÿàÿ¨Ÿá ŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶)

        ÿßŸÑŸáÿØŸÅ: ÿ™ŸÇÿØŸäŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿØŸÇŸäŸÇÿ©ÿå ÿ™ÿ¥ÿ¨Ÿäÿπ ÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿßÿ™ ŸàŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ≤Ÿàÿßÿ± ÿπŸÑŸâ ÿßÿ™ÿÆÿßÿ∞ ŸÇÿ±ÿßÿ±ÿßÿ™ ŸÖÿØÿ±Ÿàÿ≥ÿ© ÿ®ÿ¥ÿ£ŸÜ ÿπŸÑÿßÿ¨ÿßÿ™ ÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ ŸÖÿπ ÿßŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ŸÖÿ≠ÿßÿØÿ´ÿ© ŸÖÿ™ŸÖÿßÿ≥ŸÉÿ© Ÿàÿ¥ÿÆÿµŸäÿ©.
      `;

      console.log('ü§ñ ChatBot: Sending message to Gemini:', message);

      // Build the complete prompt with conversation context
      const conversationContext = getConversationContext();
      const fullPrompt = `${systemPrompt}${conversationContext}Question du client: ${message}`;

      const requestBody = {
        contents: [{
          parts: [{
            text: fullPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 500,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      console.log('ü§ñ ChatBot: Request body:', JSON.stringify(requestBody, null, 2));

      // Try multiple model endpoints with fallback system
      const modelEndpoints = [
        'gemini-1.5-flash',
        'gemini-1.5-pro', 
        'gemini-pro'
      ];

      let lastError = null;

      for (const model of modelEndpoints) {
        try {
          console.log(`ü§ñ ChatBot: Trying model: ${model}`);
          
          const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
          
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
          });

          console.log(`ü§ñ ChatBot: Response status from ${model}:`, response.status);

          if (!response.ok) {
            const errorText = await response.text();
            console.error(`ü§ñ ChatBot: HTTP Error from ${model}:`, response.status, errorText);
            lastError = new Error(`${model}: HTTP ${response.status} - ${errorText}`);
            continue; // Try next model
          }

          const data = await response.json();
          console.log(`ü§ñ ChatBot: Successful response from ${model}:`, data);

          if (!data.candidates || data.candidates.length === 0) {
            console.error(`ü§ñ ChatBot: No candidates in response from ${model}`);
            lastError = new Error(`${model}: No response candidates received`);
            continue;
          }

          const candidate = data.candidates[0];
          if (candidate.finishReason === 'SAFETY') {
            return selectedLanguage === 'FR' 
              ? "D√©sol√©, je ne peux pas r√©pondre √† cette question pour des raisons de s√©curit√©. Pouvez-vous reformuler votre demande ?"
              : "ÿπÿ∞ÿ±ÿßŸãÿå ŸÑÿß ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ≥ÿ§ÿßŸÑ ŸÑÿ£ÿ≥ÿ®ÿßÿ® ÿ£ŸÖŸÜŸäÿ©. ŸáŸÑ ŸäŸÖŸÉŸÜŸÉ ÿ•ÿπÿßÿØÿ© ÿµŸäÿßÿ∫ÿ© ÿ∑ŸÑÿ®ŸÉÿü";
          }

          const botResponse = candidate.content?.parts?.[0]?.text;
          if (!botResponse) {
            console.error(`ü§ñ ChatBot: No text content in response from ${model}`);
            lastError = new Error(`${model}: Empty response text`);
            continue;
          }

          // Success! Return the response
          console.log(`ü§ñ ChatBot: Successfully got response from ${model}`);
          return botResponse;

        } catch (error) {
          console.error(`ü§ñ ChatBot: Error with model ${model}:`, error);
          lastError = error;
          continue; // Try next model
        }
      }

      // If we get here, all models failed
      throw lastError || new Error('All model endpoints failed');

    } catch (error) {
      console.error('ü§ñ ChatBot Error calling Gemini API:', error);
      return selectedLanguage === 'FR'
        ? `D√©sol√©, je rencontre un probl√®me technique (${error.message}). Veuillez contacter directement notre institut pour une assistance imm√©diate.`
        : `ÿπÿ∞ÿ±ÿßŸãÿå ÿ£Ÿàÿßÿ¨Ÿá ŸÖÿ¥ŸÉŸÑÿ© ÿ™ŸÇŸÜŸäÿ© (${error.message}). Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÖÿπŸáÿØŸÜÿß ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑŸÅŸàÿ±Ÿäÿ©.`;
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    playSound('send');

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(() => {
      playSound('typing');
    }, 300);

    try {
      const botResponse = await sendToGemini(inputMessage);
      
      setIsTyping(false);
      
      // Add typing animation delay before showing response
      setTimeout(() => {
        const botMessage = {
          id: Date.now() + 1,
          text: botResponse,
          sender: 'bot',
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);
        
        // Add to conversation memory
        addToConversationHistory(inputMessage, botResponse);
        
        playSound('receive');
      }, 500);
      
    } catch (error) {
      setIsTyping(false);
      const errorMessage = {
        id: Date.now() + 1,
        text: selectedLanguage === 'FR' 
          ? "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer."
          : "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.",
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    }

    setIsLoading(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const quickQuestions = selectedLanguage === 'FR' ? [
    "Quels sont vos services ?",
    "Quels sont vos tarifs de blanchiment ?",
    "Comment prendre rendez-vous ?",
    "Le blanchiment est-il s√ªr ?",
    "Combien de temps dure le traitement ?",
    "O√π √™tes-vous situ√©s √† Agadir ?"
  ] : [
    "ŸÖÿß ŸáŸä ÿÆÿØŸÖÿßÿ™ŸÉŸÖÿü",
    "ŸÖÿß ŸáŸä ÿ£ÿ≥ÿπÿßÿ± ÿßŸÑÿ™ÿ®ŸäŸäÿ∂ÿü", 
    "ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØÿü",
    "ŸáŸÑ ÿßŸÑÿ™ÿ®ŸäŸäÿ∂ ÿ¢ŸÖŸÜÿü",
    "ŸÉŸÖ Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿßŸÑÿπŸÑÿßÿ¨ÿü",
    "ÿ£ŸäŸÜ ŸÖŸàŸÇÿπŸÉŸÖ ŸÅŸä ÿ£ŸÉÿßÿØŸäÿ±ÿü"
  ];

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
    setTimeout(() => {
      handleSendMessage();
    }, 100);
  };

  const formatTime = (timestamp) => {
    return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <div className="flex flex-col items-end space-y-3">
          {/* Help message bubble - only show if widget hasn't been clicked before */}
          {!hasBeenClicked && (
            <div className="bg-white p-3 rounded-lg shadow-md max-w-[200px] text-sm border border-gray-200 transform transition-all duration-300 animate-fadeInUp">
              <p className={`${font} text-gray-700`}>
                {selectedLanguage === 'FR' 
                  ? "Besoin d'aide ? N'h√©sitez pas √† me demander !"
                  : "ŸáŸÑ ÿ™ÿ≠ÿ™ÿßÿ¨ ŸÑŸÑŸÖÿ≥ÿßÿπÿØÿ©ÿü ŸÑÿß ÿ™ÿ™ÿ±ÿØÿØ ŸÅŸä ÿ≥ÿ§ÿßŸÑŸä!"}
              </p>
              <div className="absolute -bottom-2 right-5 w-3 h-3 bg-white border-r border-b border-gray-200 transform rotate-45"></div>
            </div>
          )}
          
          {/* Chat button - positioned above WhatsApp */}
          <button
            onClick={() => {
              setIsOpen(true);
              setHasBeenClicked(true); // Mark as clicked when widget is opened
              // Play subtle notification sound when opening
              playSound('receive');
            }}
            className="bg-primary hover:bg-primary/90 text-white p-4 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105"
            aria-label={selectedLanguage === 'FR' ? 'Ouvrir le chat' : 'ŸÅÿ™ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©'}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          </button>

          {/* WhatsApp button - positioned below chatbot */}
          <button
            onClick={() => {
              const phoneNumber = "+212658547264";
              const message = selectedLanguage === 'FR' 
                ? "Bonjour, je souhaite avoir plus d'informations sur vos services de blanchiment dentaire."
                : "ŸÖÿ±ÿ≠ÿ®ÿßŸãÿå ÿ£ŸàÿØ ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ŸàŸÑ ÿÆÿØŸÖÿßÿ™ ÿ™ÿ®ŸäŸäÿ∂ ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ.";
              const whatsappUrl = `https://wa.me/${phoneNumber.replace(/[^\d]/g, '')}?text=${encodeURIComponent(message)}`;
              window.open(whatsappUrl, '_blank');
              playSound('send');
            }}
            className="bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105"
            aria-label={selectedLanguage === 'FR' ? 'Contacter sur WhatsApp' : 'ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± Ÿàÿßÿ™ÿ≥ÿßÿ®'}
            title={selectedLanguage === 'FR' ? 'Contacter sur WhatsApp' : 'ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± Ÿàÿßÿ™ÿ≥ÿßÿ®'}
          >
            <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
            </svg>
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <div className="bg-white rounded-lg shadow-xl w-80 h-[500px] flex flex-col overflow-hidden border border-gray-200 transform transition-all duration-300 ease-in-out">
        {/* Header */}
        <div className="bg-primary text-white p-4 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            <span className={`font-semibold ${font}`}>
              {selectedLanguage === 'FR' ? 'OneSmile Assistant' : 'ŸÖÿ≥ÿßÿπÿØ OneSmile'}
            </span>
            {conversationHistory.length > 0 && (
              <span className="text-xs bg-white/20 px-1 py-0.5 rounded text-white/80">
                {conversationHistory.length}
              </span>
            )}
          </div>
          <div className="flex items-center space-x-2">
            {conversationHistory.length > 0 && (
              <button
                onClick={clearConversationHistory}
                className="text-white/70 hover:text-white transition-colors text-xs"
                title={selectedLanguage === 'FR' ? 'Nouvelle conversation' : 'ŸÖÿ≠ÿßÿØÿ´ÿ© ÿ¨ÿØŸäÿØÿ©'}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </button>
            )}
            <button
              onClick={() => setSoundEnabled(!soundEnabled)}
              className="text-white/70 hover:text-white transition-colors text-xs"
              title={selectedLanguage === 'FR' 
                ? (soundEnabled ? 'D√©sactiver le son' : 'Activer le son')
                : (soundEnabled ? 'ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿµŸàÿ™' : 'ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿµŸàÿ™')}
            >
              {soundEnabled ? (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M11 5L6 9H2v6h4l5 4V5z" />
                </svg>
              ) : (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.586 15H2v-6h3.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />
                </svg>
              )}
            </button>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white hover:text-gray-200 transition-colors transform "
              aria-label={selectedLanguage === 'FR' ? 'Fermer le chat' : 'ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©'}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gradient-to-b from-gray-50 to-white">
          {messages.map((message, index) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} transform transition-all duration-500 ease-out`}
              style={{
                animation: `slideIn 0.5s ease-out ${index * 0.1}s both`
              }}
            >
              <div
                className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg shadow-sm transform transition-all duration-200  ${
                  message.sender === 'user'
                    ? 'bg-gradient-to-r from-primary to-primary/90 text-white'
                    : 'bg-white text-gray-800 border border-gray-200'
                } ${font}`}
                dir={selectedLanguage === 'AR' ? 'rtl' : 'ltr'}
              >
                <div 
                  className="text-sm whitespace-pre-wrap"
                  dangerouslySetInnerHTML={{ __html: renderMarkdown(message.text) }}
                />
                <p className={`text-xs mt-1 opacity-70 ${selectedLanguage === 'AR' ? 'text-right' : 'text-left'}`}>
                  {formatTime(message.timestamp)}
                </p>
              </div>
            </div>
          ))}
          
          {(isLoading || isTyping) && (
            <div className="flex justify-start">
              <div className="bg-white border border-gray-200 px-3 py-2 rounded-lg shadow-sm animate-pulse">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Quick Questions */}
        {messages.length <= 1 && (
          <div className="px-4 py-2 border-t border-gray-200 bg-gray-50">
            <p className={`text-xs text-gray-500 mb-2 ${font}`}>
              {selectedLanguage === 'FR' ? 'Questions rapides :' : 'ÿ£ÿ≥ÿ¶ŸÑÿ© ÿ≥ÿ±Ÿäÿπÿ©:'}
            </p>
            <div className="flex flex-wrap gap-1">
              {quickQuestions.slice(0, 3).map((question, index) => (
                <button
                  key={index}
                  onClick={() => handleQuickQuestion(question)}
                  className={`text-xs bg-white hover:bg-primary hover:text-white px-2 py-1 rounded border border-gray-200 transition-all duration-200 transform  ${font}`}
                  dir={selectedLanguage === 'AR' ? 'rtl' : 'ltr'}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Input */}
        <div className="p-4 border-t border-gray-200 bg-white">
          <div className="flex space-x-2">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={selectedLanguage === 'FR' ? 'Tapez votre message...' : 'ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ...'}
              className={`flex-1 border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 ${font}`}
              dir={selectedLanguage === 'AR' ? 'rtl' : 'ltr'}
              disabled={isLoading}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="bg-primary text-white p-2 rounded-md hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform  "
              aria-label={selectedLanguage === 'FR' ? 'Envoyer' : 'ÿ•ÿ±ÿ≥ÿßŸÑ'}
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      {/* CSS Animations */}
      <style jsx>{`
        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-fadeInUp {
          animation: fadeInUp 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default ChatBot;
